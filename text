Method	Description
->cron(‘* * * * *’);	Run the task on a custom Cron schedule
->everyMinute();	Run the task every minute
->everyTwoMinutes();	Run the task every two minutes
->everyThreeMinutes();	Run the task every three minutes
->everyFourMinutes();	Run the task every four minutes
->everyFiveMinutes();	Run the task every five minutes
->everyTenMinutes();	Run the task every ten minutes
->everyFifteenMinutes();	Run the task every fifteen minutes
->everyThirtyMinutes();	Run the task every thirty minutes
->hourly();	Run the task every hour
->hourlyAt(17);	Run the task every hour at 17 minutes past the hour
->everyTwoHours();	Run the task every two hours
->everyThreeHours();	Run the task every three hours
->everyFourHours();	Run the task every four hours
->everySixHours();	Run the task every six hours
->daily();	Run the task every day at midnight
->dailyAt(’13:00′);	Run the task every day at 13:00
->twiceDaily(1, 13);	Run the task daily at 1:00 & 13:00
->weekly();	Run the task every sunday at 00:00
->weeklyOn(1, ‘8:00’);	Run the task every week on Monday at 8:00
->monthly();	Run the task on the first day of every month at 00:00
->monthlyOn(4, ’15:00′);	Run the task every month on the 4th at 15:00
->monthlyOnLastDay(’15:00′);	Run the task on the last day of the month at 15:00
->quarterly();	Run the task on the first day of every quarter at 00:00
->yearly();	Run the task on the first day of every year at 00:00
->timezone(‘America/New_York’);	Set the timezone

Running scheduled command: '/usr/local/Cellar/php/7.4.7/bin/php' 'artisan' quote:daily > '/dev/null' 2>&1
* * * * * cd /your-project-path && php artisan schedule:run >> /dev/null 2>&1

| ----------------------------------------------------------------
laravel task schedule
@foreach($user->chunk(100) as $chunk)
      @foreach ($chunk as $data)
           <tr>
               <td>{{$data->name}}</td>
               <td>xxxx<td>
           <tr>
     @endforeach
@endforeach




function binarySearch(Array $arr, $x)
{
    // check for empty array
    if (count($arr) === 0) return false;
    $low = 0;
    $high = count($arr) - 1;

    while ($low <= $high) {

        // compute middle index
        $mid = floor(($low + $high) / 2);

        // element found at mid
        if($arr[$mid] == $x) {
            return true;
        }

        if ($x < $arr[$mid]) {
            // search the left side of the array
            $high = $mid -1;
        }
        else {
            // search the right side of the array
            $low = $mid + 1;
        }
    }

    // If we reach here element x doesnt exist
    return false;
}

// Driver code
$arr = array(1, 2, 3, 4, 5);
$value = 5;
if(binarySearch($arr, $value) == true) {
    echo $value." Exists";
}
else {
    echo $value." Doesnt Exist";
}
?>
